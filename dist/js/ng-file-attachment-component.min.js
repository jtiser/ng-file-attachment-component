var bluesky;!function(t){var e;!function(e){var i;!function(e){var i=t.core.models.FileAttachmentOriginEnum,n=function(){function t(t,e,i,n,r,o){this.httpWrapperService=t,this.$log=e,this.$timeout=i,this.Upload=n,this.Blob=r,this.FileSaver=o}return t.$inject=["httpWrapperService","$log","$timeout","Upload","Blob","FileSaver"],t.prototype.getAttachedFiles=function(t,e){return this.httpWrapperService.get("file-attachment/search",{params:{elementId:t,origin:i[e]},apiEndpoint:!0})},t.prototype.downloadAttachedFile=function(t,e,n){var r=this;return t&&t.Id&&t.FileName?n?this.httpWrapperService.get("file-attachment/download",{params:{fileAttachmentId:t.Id,origin:i[e]},apiEndpoint:!0}).then(function(e){var i=new Blob([e],{type:"application/octet-stream;utf-8"});r.FileSaver.saveAs(i,t.FileName||"unknown.bin")}):(this.$log.error("[anchorElement] mandatory."),null):(this.$log.error("[fileAttachment] mandatory."),null)},t.prototype.deleteAttachedFile=function(t,e){return this.httpWrapperService["delete"]("file-attachment/delete",{params:{fileAttachmentId:t,origin:i[e]},apiEndpoint:!0})},t.prototype.attachFile=function(t,e,n){var r=this;return n?this.Upload.base64DataUrl(n).then(function(o){return r.httpWrapperService.post("file-attachment/put",{ElementId:t,Origin:i[e],FileUploadBaseDto:{FileName:n.name,FileBase64Url:o.slice(o.indexOf("base64,")+"base64,".length),ContentType:n.type}},{apiEndpoint:!0,uploadInBase64Json:!0})}):(this.$log.warn("[fileAttachmentService.attachFile] file is empty, aborting upload."),null)},t.prototype.editFileAttachmentComment=function(t,e,n){return this.httpWrapperService.post("file-attachment/update-comment",{FileAttachmentId:t,Origin:i[e],Comment:n},{apiEndpoint:!0})},t}();e.FileAttachmentService=n,angular.module("bluesky.core.services.fileAttachment",["ng.httpWrapper","ngFileUpload","ngFileSaver"]).service("fileAttachmentService",n)}(i=e.services||(e.services={}))}(e=t.core||(t.core={}))}(bluesky||(bluesky={}));var bluesky;!function(t){var e;!function(t){var e;!function(t){!function(t){t[t.QuoteWizardFileAttachment=0]="QuoteWizardFileAttachment",t[t.OrderEntryCustomDetails=1]="OrderEntryCustomDetails",t[t.OrderEntryAudioCustomDetail=2]="OrderEntryAudioCustomDetail",t[t.OrderTrackingFileAttachment=3]="OrderTrackingFileAttachment"}(t.FileAttachmentOriginEnum||(t.FileAttachmentOriginEnum={}));t.FileAttachmentOriginEnum}(e=t.models||(t.models={}))}(e=t.core||(t.core={}))}(bluesky||(bluesky={}));var bluesky;!function(t){var e;!function(t){var e;!function(t){var e=function(){function t(t,e,i,n,r,o){this.Id=t,this.FileName=e,this.Comment=i,this.UploadedBy=n,this.CreationDate=r,this.Origin=o}return t}();t.FileAttachment=e}(e=t.models||(t.models={}))}(e=t.core||(t.core={}))}(bluesky||(bluesky={}));var bluesky;!function(t){var e;!function(e){var i;!function(e){var i=t.core.models.FileAttachmentOriginEnum,n=function(){function t(t,e,n){return this.$log=t,this.toaster=e,this.fileAttachmentService=n,this.fileAttachmentDownloadLinkElementId="file-attachment-download-link",this.elementIdBinding?i[this.originBinding]?(this.httpPromises=new Array,this.getAttachedFiles(),void(this.nbOfItemsPerPage=10)):void this.$log.error("parameter {originBinding} is mandatory."):void this.$log.error("parameter {elementIdBinding} is mandatory.")}return t.$inject=["$log","toaster","fileAttachmentService"],t.prototype.getAttachedFiles=function(){var t=this,e=this.fileAttachmentService.getAttachedFiles(this.elementIdBinding,this.originBinding).then(function(e){t.attachedFileList=e,t.attachedFileListSource=e});this.httpPromises.push(e)},t.prototype.downloadAttachedFile=function(t){if(t&&t.Id){var e=$("#"+this.fileAttachmentDownloadLinkElementId),i=this.fileAttachmentService.downloadAttachedFile(t,this.originBinding,e).then(function(){});this.httpPromises.push(i)}},t.prototype.deleteAttachedFile=function(t){var e=this;if(t&&t.Id){var i=this.fileAttachmentService.deleteAttachedFile(t.Id,this.originBinding).then(function(){e.toaster.success("File ("+t.FileName+") successfully deleted."),e.getAttachedFiles()});this.httpPromises.push(i)}},t.prototype.updateFileAttachmentComment=function(t,e){if(t&&t.Id&&e){var i=this.fileAttachmentService.editFileAttachmentComment(t.Id,this.originBinding,e).then(function(){});this.httpPromises.push(i)}},t.prototype.fileSelected=function(t,e){var i=this;if(t){var n=this.fileAttachmentService.attachFile(this.elementIdBinding,this.originBinding,t).then(function(){i.toaster.success("File ("+t.name+") successfully uploaded."),i.getAttachedFiles()});this.httpPromises.push(n)}},t.prototype.openSelectFileDialog=function(){$("#input-file-select-field").click()},t.prototype.isSelectFileBtnDisabled=function(){return!1},t}();e.FileAttachmentComponentController=n;var r=function(){function t(){this.bindings={elementIdBinding:"=",originBinding:"="},this.controller=n,this.controllerAs="vm",this.templateUrl="component/file-attachment.tpl.html"}return t}();e.FileAttachmentComponent=r,angular.module("bluesky.core.components.fileAttachment",["cgBusy","smart-table","toaster","file-attachment-component-tpl","bluesky.core.services.fileAttachment"]).value("cgBusyDefaults",{templateUrl:"templates/angular-busy/angular-busy-custom.tpl.html"}).component("fileAttachmentComponent",new r)}(i=e.components||(e.components={}))}(e=t.core||(t.core={}))}(bluesky||(bluesky={}));
//# sourceMappingURL=data:application/json;base64,
