var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var components;
        (function (components) {
            var FileAttachmentOriginEnum = bluesky.core.models.FileAttachmentOriginEnum;
            var FileAttachmentComponentController = (function () {
                //#endregion
                //#region ctor
                /* @ngInject */
                FileAttachmentComponentController.$inject = ["$log", "toaster", "fileAttachmentService"];
                function FileAttachmentComponentController($log, toaster, fileAttachmentService) {
                    this.$log = $log;
                    this.toaster = toaster;
                    this.fileAttachmentService = fileAttachmentService;
                    this.fileAttachmentDownloadLinkElementId = 'file-attachment-download-link'; //TODO MGA : to const ?
                    if (!this.elementIdBinding) {
                        this.$log.error('parameter {elementIdBinding} is mandatory.');
                        return;
                    }
                    if (!FileAttachmentOriginEnum[this.originBinding]) {
                        this.$log.error('parameter {originBinding} is mandatory.');
                        return;
                    }
                    this.httpPromises = new Array();
                    // call srv to get list of files
                    this.getAttachedFiles();
                    this.nbOfItemsPerPage = 10;
                }
                //#endregion
                //#region vm methods
                FileAttachmentComponentController.prototype.getAttachedFiles = function () {
                    var _this = this;
                    var httpPromise = this.fileAttachmentService.getAttachedFiles(this.elementIdBinding, this.originBinding).then(function (fileAttachmentList) {
                        _this.attachedFileList = fileAttachmentList;
                        _this.attachedFileListSource = fileAttachmentList; //TODO MGA : duplicate ? to prevent update to source list if collection modified ?
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.downloadAttachedFile = function (fileAttachment) {
                    if (!fileAttachment || !fileAttachment.Id)
                        return;
                    var jQueryAnchorElement = $('#' + this.fileAttachmentDownloadLinkElementId); //add id selector
                    var httpPromise = this.fileAttachmentService.downloadAttachedFile(fileAttachment, this.originBinding, jQueryAnchorElement).then(function () {
                        //TODO MGA ? or leave as is.
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.deleteAttachedFile = function (fileAttachment) {
                    var _this = this;
                    if (!fileAttachment || !fileAttachment.Id)
                        return;
                    var httpPromise = this.fileAttachmentService.deleteAttachedFile(fileAttachment.Id, this.originBinding).then(function () {
                        _this.toaster.success("File (" + fileAttachment.FileName + ") successfully deleted.");
                        _this.getAttachedFiles();
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.updateFileAttachmentComment = function (fileAttachment, updatedComment) {
                    if (!fileAttachment || !fileAttachment.Id || !updatedComment)
                        return;
                    var httpPromise = this.fileAttachmentService.editFileAttachmentComment(fileAttachment.Id, this.originBinding, updatedComment).then(function () {
                        //TODO MGA : highlight updated comment ? + get out of edit mode
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.fileSelected = function (file, event) {
                    var _this = this;
                    if (!file)
                        return;
                    var httpPromise = this.fileAttachmentService.attachFile(this.elementIdBinding, this.originBinding, file).then(function () {
                        _this.toaster.success("File (" + file.name + ") successfully uploaded.");
                        _this.getAttachedFiles(); //TODO MGA : highlight new entry ?
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.openSelectFileDialog = function () {
                    //TODO MGA : simulate user direct click to input file field (hidden but used for AT tests)
                    $('#input-file-select-field').click();
                };
                //TODO MGA
                FileAttachmentComponentController.prototype.isSelectFileBtnDisabled = function () { return false; };
                return FileAttachmentComponentController;
            }());
            components.FileAttachmentComponentController = FileAttachmentComponentController;
            var FileAttachmentComponent = (function () {
                function FileAttachmentComponent() {
                    this.bindings = {
                        elementIdBinding: '=',
                        originBinding: '='
                    };
                    this.controller = FileAttachmentComponentController;
                    this.controllerAs = 'vm';
                    this.templateUrl = 'component/file-attachment.tpl.html';
                }
                return FileAttachmentComponent;
            }());
            components.FileAttachmentComponent = FileAttachmentComponent;
            angular.module('bluesky.core.components.fileAttachment', [
                'cgBusy',
                'smart-table',
                'toaster',
                'file-attachment-component-tpl',
                'bluesky.core.services.fileAttachment'
            ])
                .value('cgBusyDefaults', { templateUrl: 'templates/angular-busy/angular-busy-custom.tpl.html' })
                .component('fileAttachmentComponent', new FileAttachmentComponent());
        })(components = core.components || (core.components = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            /**
             * TODO MGA : decide on practice to share enums with srv etc
             */
            (function (FileAttachmentOriginEnum) {
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["QuoteWizardFileAttachment"] = 0] = "QuoteWizardFileAttachment";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderEntryCustomDetails"] = 1] = "OrderEntryCustomDetails";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderEntryAudioCustomDetail"] = 2] = "OrderEntryAudioCustomDetail";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderTrackingFileAttachment"] = 3] = "OrderTrackingFileAttachment";
            })(models.FileAttachmentOriginEnum || (models.FileAttachmentOriginEnum = {}));
            var FileAttachmentOriginEnum = models.FileAttachmentOriginEnum;
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            /**
             * TODO MGA : export an interface too ?
             */
            var FileAttachment = (function () {
                function FileAttachment(Id, FileName, Comment, UploadedBy, CreationDate, Origin) {
                    this.Id = Id;
                    this.FileName = FileName;
                    this.Comment = Comment;
                    this.UploadedBy = UploadedBy;
                    this.CreationDate = CreationDate;
                    this.Origin = Origin;
                }
                return FileAttachment;
            }());
            models.FileAttachment = FileAttachment;
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var services;
        (function (services) {
            var FileAttachmentOriginEnum = bluesky.core.models.FileAttachmentOriginEnum;
            var FileAttachmentService = (function () {
                /* @ngInject */
                FileAttachmentService.$inject = ["httpWrapperService", "$log", "$timeout", "Upload", "Blob", "FileSaver"];
                function FileAttachmentService(httpWrapperService, $log, $timeout, Upload, Blob, //TODO MGA: typings ?
                    FileSaver //TODO MGA: typings ?
                    ) {
                    this.httpWrapperService = httpWrapperService;
                    this.$log = $log;
                    this.$timeout = $timeout;
                    this.Upload = Upload;
                    this.Blob = Blob;
                    this.FileSaver = FileSaver;
                }
                FileAttachmentService.prototype.getAttachedFiles = function (elementId, origin) {
                    //TODO MGA : cleaner params handling to pass to http call
                    return this.httpWrapperService.get('file-attachment/search', {
                        params: { 'elementId': elementId, 'origin': FileAttachmentOriginEnum[origin] },
                        apiEndpoint: true
                    });
                };
                FileAttachmentService.prototype.downloadAttachedFile = function (fileAttachment, origin, anchorElement) {
                    var _this = this;
                    if (!fileAttachment || !fileAttachment.Id || !fileAttachment.FileName) {
                        this.$log.error('[fileAttachment] mandatory.');
                        return null;
                    }
                    if (!anchorElement) {
                        this.$log.error('[anchorElement] mandatory.');
                        return null;
                    }
                    return this.httpWrapperService.get('file-attachment/download', {
                        params: { 'fileAttachmentId': fileAttachment.Id, 'origin': FileAttachmentOriginEnum[origin] },
                        apiEndpoint: true
                    }).then(function (file) {
                        //var filewithBOM = '\uFEFF'+ file;
                        var blob = new Blob([file], { type: 'application/octet-stream;utf-8' }); //TODO MGA: type ??? how to retrieve content-type from blob
                        //var blob = new Blob([file], { type: 'image/png;charset=windows-1252' }); //TODO MGA: type ??? how to retrieve content-type from blob
                        //var blob = new Blob([file], { type: 'image/png;charset=ISO-8859-1' }); //TODO MGA: type ??? how to retrieve content-type from blob
                        //var blob = new Blob([file], { type: 'image/png' }); //TODO MGA: type ??? how to retrieve content-type from blob
                        _this.FileSaver.saveAs(blob, fileAttachment.FileName || 'unknown.bin');
                        //var url = window.URL.createObjectURL(blob);
                        ////TODO MGA: delay to to be outside of current digest cycle : how to fix ?
                        //this.$timeout(() => {
                        //    anchorElement
                        //        .attr({
                        //            "href": url,
                        //            "download": 'unknown.png'
                        //            //"download": fileAttachmentName || 'unknown.bin'
                        //        })
                        //        //.html($("a").attr("download"))
                        //        .get(0).click();
                        //    window.URL.revokeObjectURL(url);
                        //    // TODO MGA : hack to trigger download of file from JS, to refactor in a directive + see Jquery limitations of click event : http://stackoverflow.com/questions/17311645/download-image-with-javascript 
                        //    //anchorElement.prop('href', url);
                        //    //anchorElement.prop('download', fileAttachmentName || 'unknown.bin'); //TODO MGA ???
                        //    //anchorElement.get(0).click();
                        //}, 0);
                        //anchorElement.click();
                        //setTimeout(function () {
                        // Added a small delay because file was removed to quickly in firefox and the download was even not initialized
                        // Remove temp element from browser cache : TODO MGA find a way to do this in a finally() clause in the service method ?
                        //window.URL.revokeObjectURL(url);
                        //}, 100);
                        return;
                    });
                };
                FileAttachmentService.prototype.deleteAttachedFile = function (fileAttachmentId, origin) {
                    return this.httpWrapperService.delete('file-attachment/delete', {
                        params: { 'fileAttachmentId': fileAttachmentId, 'origin': FileAttachmentOriginEnum[origin] },
                        apiEndpoint: true
                    });
                };
                FileAttachmentService.prototype.attachFile = function (elementId, origin, fileToUpload) {
                    var _this = this;
                    if (!fileToUpload) {
                        this.$log.warn('[fileAttachmentService.attachFile] file is empty, aborting upload.');
                        return null;
                    }
                    //TODO MGA: we should rely on a stronger http-wrapper to handle upload this way
                    return this.Upload.base64DataUrl(fileToUpload).then(function (fileBase64Url) {
                        return _this.httpWrapperService.post('file-attachment/put', 
                        //TODO MGA : create model for AttachFileDto & FileUploadBaseDto
                        {
                            'ElementId': elementId,
                            'Origin': FileAttachmentOriginEnum[origin],
                            'FileUploadBaseDto': {
                                'FileName': fileToUpload.name,
                                'FileBase64Url': fileBase64Url.slice(fileBase64Url.indexOf('base64,') + 'base64,'.length),
                                'ContentType': fileToUpload.type
                            }
                        }, {
                            apiEndpoint: true,
                            uploadInBase64Json: true
                        });
                    });
                };
                FileAttachmentService.prototype.editFileAttachmentComment = function (fileAttachmentId, origin, updatedComment) {
                    return this.httpWrapperService.post('file-attachment/update-comment', 
                    //TODO MGA : create Dto client-side or update endpoint srv-side to support part-params url + comment as payload (cleaner SOC).
                    {
                        'FileAttachmentId': fileAttachmentId,
                        'Origin': FileAttachmentOriginEnum[origin],
                        'Comment': updatedComment
                    }, { apiEndpoint: true });
                };
                return FileAttachmentService;
            }());
            services.FileAttachmentService = FileAttachmentService;
            angular.module('bluesky.core.services.fileAttachment', ['ng.httpWrapper', 'ngFileUpload', 'ngFileSaver'])
                .service('fileAttachmentService', FileAttachmentService);
        })(services = core.services || (core.services = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

//# sourceMappingURL=data:application/json;base64,
