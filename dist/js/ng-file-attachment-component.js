var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var components;
        (function (components) {
            var FileAttachmentComponentController = (function () {
                //#endregion
                //#region ctor
                /* @ngInject */
                FileAttachmentComponentController.$inject = ["$log", "toaster", "_", "fileAttachmentService", "fileAttachmentOriginEnum", "applicationOriginEnum"];
                function FileAttachmentComponentController($log, toaster, _, fileAttachmentService, fileAttachmentOriginEnum, applicationOriginEnum) {
                    this.$log = $log;
                    this.toaster = toaster;
                    this._ = _;
                    this.fileAttachmentService = fileAttachmentService;
                    this.fileAttachmentOriginEnum = fileAttachmentOriginEnum;
                    this.applicationOriginEnum = applicationOriginEnum;
                    this.fileAttachmentDownloadLinkElementId = 'file-attachment-download-link'; //TODO MGA : to const ?
                    this.hasCurrentUserUploadRights = false;
                    //#endregion
                    //#region private fields
                    this.maxFileSize = 20000000; //in bytes = 20mb
                    if (!this.elementIdBinding) {
                        this.$log.error('parameter {elementIdBinding} is mandatory.');
                        return;
                    }
                    if (!this.applicationOriginEnum[this.originBinding]) {
                        this.$log.error('parameter {originBinding} is mandatory.');
                        return;
                    }
                    this.httpPromises = new Array();
                    // get list of attached files for current element
                    this.getAttachedFiles();
                    // get flag to know if current user has upload rights for current item
                    this.getCurrentUserUploadRights();
                    // get supported mime types for file upload, based on srv info
                    this.getSupportedMimeTypes();
                    this.nbOfItemsPerPage = 10;
                    this.fileInvalidMessageArray = new Array();
                }
                //#endregion
                //#region vm methods
                FileAttachmentComponentController.prototype.getAttachedFiles = function () {
                    var _this = this;
                    var httpPromise = this.fileAttachmentService.getAttachedFiles(this.elementIdBinding, this.originBinding).then(function (fileAttachmentList) {
                        _this.attachedFileList = fileAttachmentList;
                        _this.attachedFileListSource = fileAttachmentList; //TODO MGA : duplicate ? to prevent update to source list if collection modified ?
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.getSupportedMimeTypes = function () {
                    var _this = this;
                    var httpPromise = this.fileAttachmentService.getSupportedMimeTypes().then(function (supportedMimeTypes) {
                        _this.supportedMimeTypes = _(supportedMimeTypes).uniq();
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.downloadAttachedFile = function (fileAttachment) {
                    if (!fileAttachment || !fileAttachment.Id)
                        return;
                    var jQueryAnchorElement = $('#' + this.fileAttachmentDownloadLinkElementId); //add id selector
                    var httpPromise = this.fileAttachmentService.downloadAttachedFile(fileAttachment, this.fileAttachmentOriginEnum[fileAttachment.FileOrigin], jQueryAnchorElement).then(function () {
                        //TODO MGA ? or leave as is.
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.deleteAttachedFile = function (fileAttachment) {
                    var _this = this;
                    if (!fileAttachment || !fileAttachment.Id)
                        return;
                    var httpPromise = this.fileAttachmentService.deleteAttachedFile(fileAttachment.Id, this.fileAttachmentOriginEnum[fileAttachment.FileOrigin]).then(function () {
                        _this.toaster.success("File (" + fileAttachment.FileName + ") successfully deleted.");
                        _this.getAttachedFiles();
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.updateFileAttachmentComment = function (fileAttachment, updatedComment) {
                    var _this = this;
                    if (!fileAttachment || !fileAttachment.Id || !updatedComment)
                        return;
                    var httpPromise = this.fileAttachmentService.editFileAttachmentComment(fileAttachment.Id, this.fileAttachmentOriginEnum[fileAttachment.FileOrigin], updatedComment).then(function () {
                        _this.clearEditCommentMode(fileAttachment); //TODO MGA: useless if we reload all data from srv
                        // retrieve update list of files with updated file comment from srv : TODO MGA improve reload (costly)
                        _this.getAttachedFiles();
                        // TODO MGA : highlight updated comment ?
                    });
                    this.httpPromises.push(httpPromise);
                };
                /**
                 * TODO MGA: improve inlin-form error handling & UI feedback ! not dynamic // fluid to use
                 * @param fileAttachment
                 */
                FileAttachmentComponentController.prototype.onUpdatedComment = function (fileAttachment) {
                    if (!fileAttachment.updatedComment || fileAttachment.updatedComment.length < 1) {
                        fileAttachment.updatedCommentErrorMessage = "comment must be non-empty";
                    }
                    else if (fileAttachment.updatedComment &&
                        (fileAttachment.updatedComment.length < 1 || fileAttachment.updatedComment.length > 255)) {
                        fileAttachment.updatedCommentErrorMessage = "comment must be < 255 characters";
                    }
                    else {
                        fileAttachment.updatedCommentErrorMessage = null; //reset error message to flag comment as valid
                    }
                };
                FileAttachmentComponentController.prototype.cancelEditComment = function (fileAttachment) {
                    fileAttachment.editCommentMode = false;
                    //fileAttachment.updatedComment = ""; // TODO MGA: decide behavior ? better to keep last entry ? but then we must also keep error message
                    //fileAttachment.updatedCommentErrorMessage = null;
                };
                FileAttachmentComponentController.prototype.onFileSelected = function (file, event) {
                    if (!file)
                        return;
                    this.fileInvalidMessageArray = []; //reset error array
                    var fileFormatSupported = file.type &&
                        _(this.supportedMimeTypes).any(function (supportedMimeType) { return file.type === supportedMimeType; });
                    if (!fileFormatSupported)
                        this.fileInvalidMessageArray.push("Unsupported file format: '" + file.type + "'"); //TODO MGA: convert to readable extension from mime type
                    var fileSizeSupported = file.size && file.size < this.maxFileSize;
                    if (!fileSizeSupported)
                        this.fileInvalidMessageArray.push("Selected file is bigger (" + this.convertBytesToMegaBytes(file.size) + "mb) than authorized file size: " + this.convertBytesToMegaBytes(this.maxFileSize) + "mb");
                };
                FileAttachmentComponentController.prototype.importSelectedFile = function () {
                    var _this = this;
                    if (!this.selectedFile || _(this.fileInvalidMessageArray).any())
                        return; //TODO MGA $log
                    var httpPromise = this.fileAttachmentService.attachFile(this.elementIdBinding, this.originBinding, this.selectedFile).then(function () {
                        _this.toaster.success("File (" + _this.selectedFile.name + ") successfully uploaded.");
                        _this.getAttachedFiles(); //TODO MGA : highlight new entry ?
                    }).finally(function () {
                        //clean up selected file
                        _this.clearSelectedFile();
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.clearSelectedFile = function () {
                    this.selectedFile = null;
                    this.fileInvalidMessageArray = []; // clear error messages
                    //this.fileSelectedIsValid = true;
                };
                FileAttachmentComponentController.prototype.convertBytesToMegaBytes = function (bytes) {
                    return +(bytes / 1000000).toFixed(2); //converts back to number 2-digits string representation of original conversion.
                };
                //#endregion
                //#region private methods
                FileAttachmentComponentController.prototype.clearEditCommentMode = function (fileAttachment) {
                    fileAttachment.editCommentMode = false;
                    fileAttachment.updatedComment = null;
                    fileAttachment.updatedCommentErrorMessage = null;
                };
                FileAttachmentComponentController.prototype.getCurrentUserUploadRights = function () {
                    var _this = this;
                    this.fileAttachmentService
                        .getCurrentUserUploadRights(this.elementIdBinding, this.originBinding)
                        .then(function (booleanResponse) {
                        _this.hasCurrentUserUploadRights = booleanResponse;
                    });
                };
                return FileAttachmentComponentController;
            }());
            components.FileAttachmentComponentController = FileAttachmentComponentController;
            var FileAttachmentComponent = (function () {
                function FileAttachmentComponent() {
                    this.bindings = {
                        elementIdBinding: '=',
                        originBinding: '='
                    };
                    this.controller = FileAttachmentComponentController;
                    this.controllerAs = 'vm';
                    this.templateUrl = 'component/file-attachment.tpl.html';
                }
                return FileAttachmentComponent;
            }());
            components.FileAttachmentComponent = FileAttachmentComponent;
            angular.module('bluesky.core.components.fileAttachment', [
                'cgBusy',
                'smart-table',
                'toaster',
                'file-attachment-component-tpl',
                'bluesky.core.services.fileAttachment',
                'bluesky.core.models.fileAttachmentOriginEnum',
                'bluesky.core.models.applicationOriginEnum'
            ])
                .value('cgBusyDefaults', { templateUrl: 'templates/angular-busy/angular-busy-custom.tpl.html' })
                .component('fileAttachmentComponent', new FileAttachmentComponent());
        })(components = core.components || (core.components = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var services;
        (function (services) {
            var FileAttachmentService = (function () {
                /* @ngInject */
                FileAttachmentService.$inject = ["httpWrapperService", "$log", "$timeout", "Upload", "Blob", "FileSaver", "fileAttachmentOriginEnum", "applicationOriginEnum"];
                function FileAttachmentService(httpWrapperService, $log, $timeout, Upload, Blob, //TODO MGA: typings ?
                    FileSaver, //TODO MGA: typings ?
                    fileAttachmentOriginEnum, applicationOriginEnum) {
                    this.httpWrapperService = httpWrapperService;
                    this.$log = $log;
                    this.$timeout = $timeout;
                    this.Upload = Upload;
                    this.Blob = Blob;
                    this.FileSaver = FileSaver;
                    this.fileAttachmentOriginEnum = fileAttachmentOriginEnum;
                    this.applicationOriginEnum = applicationOriginEnum;
                }
                FileAttachmentService.prototype.getAttachedFiles = function (elementId, applicationOrigin) {
                    //TODO MGA : cleaner params handling to pass to http call
                    return this.httpWrapperService.get('file-attachment/search', {
                        params: { 'elementId': elementId, 'applicationOrigin': this.applicationOriginEnum[applicationOrigin] },
                        apiEndpoint: true
                    });
                };
                FileAttachmentService.prototype.attachFile = function (elementId, applicationOrigin, fileToUpload) {
                    var _this = this;
                    if (!fileToUpload) {
                        this.$log.warn('[fileAttachmentService.attachFile] file is empty, aborting upload.');
                        return null;
                    }
                    //TODO MGA: we should rely on a stronger http-wrapper to handle upload this way
                    return this.Upload.base64DataUrl(fileToUpload).then(function (fileBase64Url) {
                        return _this.httpWrapperService.post('file-attachment/put', 
                        //TODO MGA : create model for AttachFileDto & FileUploadBaseDto
                        {
                            'ElementId': elementId,
                            'ApplicationOrigin': _this.applicationOriginEnum[applicationOrigin],
                            'FileUploadBaseDto': {
                                'FileName': fileToUpload.name,
                                'FileBase64Url': fileBase64Url.slice(fileBase64Url.indexOf('base64,') + 'base64,'.length),
                                'ContentType': fileToUpload.type
                            }
                        }, {
                            apiEndpoint: true,
                            uploadInBase64Json: true
                        });
                    });
                };
                FileAttachmentService.prototype.downloadAttachedFile = function (fileAttachment, fileOrigin, anchorElement) {
                    var _this = this;
                    if (!fileAttachment || !fileAttachment.Id || !fileAttachment.FileName) {
                        this.$log.error('[fileAttachment] mandatory.');
                        return null;
                    }
                    if (!anchorElement) {
                        this.$log.error('[anchorElement] mandatory.');
                        return null;
                    }
                    return this.httpWrapperService.get('file-attachment/download', {
                        params: { 'fileAttachmentId': fileAttachment.Id, 'fileOrigin': this.fileAttachmentOriginEnum[fileOrigin] },
                        apiEndpoint: true
                    }).then(function (file) {
                        //var filewithBOM = '\uFEFF'+ file;
                        var blob = new Blob([file], { type: 'application/octet-stream;utf-8' }); //TODO MGA: type ??? how to retrieve content-type from blob
                        //var blob = new Blob([file], { type: 'image/png;charset=windows-1252' }); //TODO MGA: type ??? how to retrieve content-type from blob
                        //var blob = new Blob([file], { type: 'image/png;charset=ISO-8859-1' }); //TODO MGA: type ??? how to retrieve content-type from blob
                        //var blob = new Blob([file], { type: 'image/png' }); //TODO MGA: type ??? how to retrieve content-type from blob
                        _this.FileSaver.saveAs(blob, fileAttachment.FileName || 'unknown.bin');
                        //var url = window.URL.createObjectURL(blob);
                        ////TODO MGA: delay to to be outside of current digest cycle : how to fix ?
                        //this.$timeout(() => {
                        //    anchorElement
                        //        .attr({
                        //            "href": url,
                        //            "download": 'unknown.png'
                        //            //"download": fileAttachmentName || 'unknown.bin'
                        //        })
                        //        //.html($("a").attr("download"))
                        //        .get(0).click();
                        //    window.URL.revokeObjectURL(url);
                        //    // TODO MGA : hack to trigger download of file from JS, to refactor in a directive + see Jquery limitations of click event : http://stackoverflow.com/questions/17311645/download-image-with-javascript 
                        //    //anchorElement.prop('href', url);
                        //    //anchorElement.prop('download', fileAttachmentName || 'unknown.bin'); //TODO MGA ???
                        //    //anchorElement.get(0).click();
                        //}, 0);
                        //anchorElement.click();
                        //setTimeout(function () {
                        // Added a small delay because file was removed to quickly in firefox and the download was even not initialized
                        // Remove temp element from browser cache : TODO MGA find a way to do this in a finally() clause in the service method ?
                        //window.URL.revokeObjectURL(url);
                        //}, 100);
                        return;
                    });
                };
                FileAttachmentService.prototype.deleteAttachedFile = function (fileAttachmentId, fileOrigin) {
                    return this.httpWrapperService.delete('file-attachment/delete', {
                        params: { 'fileAttachmentId': fileAttachmentId, 'fileOrigin': this.fileAttachmentOriginEnum[fileOrigin] },
                        apiEndpoint: true
                    });
                };
                FileAttachmentService.prototype.editFileAttachmentComment = function (fileAttachmentId, fileOrigin, updatedComment) {
                    return this.httpWrapperService.post('file-attachment/update-comment', 
                    //TODO MGA : create Dto client-side or update endpoint srv-side to support part-params url + comment as payload (cleaner SOC).
                    {
                        'FileAttachmentId': fileAttachmentId,
                        'FileOrigin': this.fileAttachmentOriginEnum[fileOrigin],
                        'Comment': updatedComment
                    }, { apiEndpoint: true });
                };
                FileAttachmentService.prototype.getSupportedMimeTypes = function () {
                    return this.httpWrapperService.get('file-attachment/authorized-mime-types', { apiEndpoint: true });
                };
                FileAttachmentService.prototype.getCurrentUserUploadRights = function (elementId, applicationOrigin) {
                    return this.httpWrapperService.get('file-attachment/get-current-user-upload-rights', {
                        params: { 'elementId': elementId, 'applicationOrigin': this.applicationOriginEnum[applicationOrigin] },
                        apiEndpoint: true
                    })
                        .then(function (response) { return response.booleanResponse; });
                };
                return FileAttachmentService;
            }());
            services.FileAttachmentService = FileAttachmentService;
            angular.module('bluesky.core.services.fileAttachment', [
                'ng.httpWrapper',
                'ngFileUpload',
                'ngFileSaver',
                'bluesky.core.models.fileAttachmentOriginEnum',
                'bluesky.core.models.applicationOriginEnum'
            ]).service('fileAttachmentService', FileAttachmentService);
        })(services = core.services || (core.services = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            /**
             * TODO MGA : decide on practice to share enums with srv etc
             */
            (function (ApplicationOriginEnum) {
                ApplicationOriginEnum[ApplicationOriginEnum["QuoteWizard"] = 0] = "QuoteWizard";
                ApplicationOriginEnum[ApplicationOriginEnum["OrderEntry"] = 1] = "OrderEntry";
                ApplicationOriginEnum[ApplicationOriginEnum["OrderTracking"] = 2] = "OrderTracking";
            })(models.ApplicationOriginEnum || (models.ApplicationOriginEnum = {}));
            var ApplicationOriginEnum = models.ApplicationOriginEnum;
            /**
             * declared as angular module to be injected at runtime inside controllers/services to use it as a dictionnary.
             * Otherwise, we are not sure the reference to this object will ve known at runtime due to order of evaluation of imports inside generated js.
             */
            angular.module('bluesky.core.models.applicationOriginEnum', [])
                .constant('applicationOriginEnum', ApplicationOriginEnum);
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            /**
             * TODO MGA : decide on practice to share enums with srv etc
             */
            (function (FileAttachmentOriginEnum) {
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["QuoteWizardFileAttachment"] = 0] = "QuoteWizardFileAttachment";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderEntryCustomDetails"] = 1] = "OrderEntryCustomDetails";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderEntryAudioCustomDetail"] = 2] = "OrderEntryAudioCustomDetail";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderTrackingFileAttachment"] = 3] = "OrderTrackingFileAttachment";
            })(models.FileAttachmentOriginEnum || (models.FileAttachmentOriginEnum = {}));
            var FileAttachmentOriginEnum = models.FileAttachmentOriginEnum;
            /**
             * declared as angular module to be injected at runtime inside controllers/services to use it as a dictionnary.
             * Otherwise, we are not sure the reference to this object will ve known at runtime due to order of evaluation of imports inside generated js.
             */
            angular.module('bluesky.core.models.fileAttachmentOriginEnum', [])
                .constant('fileAttachmentOriginEnum', FileAttachmentOriginEnum);
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            /**
             * TODO MGA : export an interface too ?
             */
            var FileAttachment = (function () {
                function FileAttachment(
                    //srv-side properties
                    Id, FileName, Comment, UploaderInformation, CreationDate, FileOrigin, 
                    //client-side properties
                    editCommentMode, updatedComment, updatedCommentErrorMessage) {
                    this.Id = Id;
                    this.FileName = FileName;
                    this.Comment = Comment;
                    this.UploaderInformation = UploaderInformation;
                    this.CreationDate = CreationDate;
                    this.FileOrigin = FileOrigin;
                    this.editCommentMode = editCommentMode;
                    this.updatedComment = updatedComment;
                    this.updatedCommentErrorMessage = updatedCommentErrorMessage;
                }
                return FileAttachment;
            }());
            models.FileAttachment = FileAttachment;
            var UserInformation = (function () {
                function UserInformation(FirstName, LastName, DisplayName, userIdentifier, Email, PhoneNumber) {
                    this.FirstName = FirstName;
                    this.LastName = LastName;
                    this.DisplayName = DisplayName;
                    this.userIdentifier = userIdentifier;
                    this.Email = Email;
                    this.PhoneNumber = PhoneNumber;
                }
                return UserInformation;
            }());
            models.UserInformation = UserInformation;
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            var JsonBooleanResponse = (function () {
                function JsonBooleanResponse(booleanResponse) {
                    this.booleanResponse = booleanResponse;
                }
                return JsonBooleanResponse;
            }());
            models.JsonBooleanResponse = JsonBooleanResponse;
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

//# sourceMappingURL=data:application/json;base64,
